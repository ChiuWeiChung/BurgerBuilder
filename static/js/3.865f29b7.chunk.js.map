{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","height","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","key","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","event","id","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","rules","isValid","trim","length","formElementsArray","this","push","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","React","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","history","goBack","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.865f29b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './CheckoutSummary.module.css'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button';\r\nconst checkoutSummary = (props)=>{\r\n    return (\r\n        <div className={classes.CheckoutSummary} >\r\n            <h1>We hope it tastes well</h1>\r\n            <div style={{width:'100%',height:'300px',margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled} >CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued} >CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary","import React from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject } from '../../../store/utility';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nclass ContactData extends React.Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        // loading: false\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = {};\r\n        for (let key in this.state.orderForm) {\r\n            formData[key] = this.state.orderForm[key].value;\r\n        };\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, id) => {\r\n        // const updatedOrderForm = {\r\n        //     ...this.state.orderForm\r\n        // }\r\n        // const updatedFormElement = {\r\n        //     ...updatedOrderForm[id]\r\n        // }\r\n        // updatedFormElement.value = event.target.value;\r\n        // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        // updatedFormElement.touched = true;\r\n        // updatedOrderForm[id] = updatedFormElement;\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[id],\r\n            {\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.orderForm[id].validation),\r\n                touched: true\r\n            }\r\n        )\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [id]: updatedFormElement\r\n        })\r\n\r\n        let formIsValid = true;\r\n        for (let key in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[key].valid && formIsValid;\r\n        }\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => {\r\n                    return (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            changed={(e) => this.inputChangedHandler(e, formElement.id)}\r\n                        />\r\n                    )\r\n                })}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}>Order</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Checkout extends React.Component {\r\n\r\n\r\n\r\n    checkoutCancelled = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinued = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />;\r\n\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelled}\r\n                        checkoutContinued={this.checkoutContinued}\r\n                    />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                    />\r\n                </div>\r\n\r\n            )\r\n        }\r\n        return summary\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => {\r\n                    return (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )\r\n                })}\r\n            </select >;\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label} >{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2VvqB\",\"Label\":\"Input_Label__1gQue\",\"InputElement\":\"Input_InputElement__1ngI8\",\"Invalid\":\"Input_Invalid__2DDB8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__RJbxh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__OI7uX\",\"Input\":\"ContactData_Input__3ETMn\"};"],"sourceRoot":""}