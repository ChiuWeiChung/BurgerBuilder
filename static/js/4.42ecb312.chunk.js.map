{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","e","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","React","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.42ecb312.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__PuWm1\",\"Input\":\"Auth_Input__3VIdR\"};","import React from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject } from '../../store/utility';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        // const updatedControls = {\r\n        //     ...this.state.controls,\r\n        //     [controlName]: {\r\n        //         ...this.state.controls[controlName],\r\n        //         value: event.target.value,\r\n        //         valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        //         touched: true\r\n        //     }\r\n        // }\r\n\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        })\r\n\r\n        this.setState({ controls: updatedControls })\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState((prevState) => {\r\n            return { isSignup: !prevState.isSignup }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => {\r\n            return (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(e) => this.inputChangedHandler(e, formElement.id)}\r\n                />\r\n            )\r\n        })\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\" >\r\n                        Submit\r\n                    </Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">\r\n                    SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => {\r\n                    return (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )\r\n                })}\r\n            </select >;\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label} >{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2VvqB\",\"Label\":\"Input_Label__1gQue\",\"InputElement\":\"Input_InputElement__1ngI8\",\"Invalid\":\"Input_Invalid__2DDB8\"};"],"sourceRoot":""}