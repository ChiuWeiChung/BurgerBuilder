{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Order","Number","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","React","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,kHCqCXC,EAjCD,SAACC,GAEX,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,uBACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAQ,OANT,UAQYN,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,MAQEG,EAAGJ,SAGhB,OACI,sBAAKW,UAAWC,IAAQC,MAAxB,UACI,4BAAIX,IACJ,wCAAU,0CAAaY,OAAOlB,EAAMmB,OAAOC,QAAQ,a,wCCvBzDC,E,uKAOF,WAEIC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAOF,KAAKtB,MAAMyB,U,oBAE1D,WACI,IAAIC,EAAS,cAACC,EAAA,EAAD,IAWb,OAVKL,KAAKtB,MAAM4B,UACZF,EAASJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAAAR,GAC3B,OACI,cAACkB,EAAD,CACIhB,YAAaF,EAAME,YACnBkB,MAAOpB,EAAMoB,OAFLpB,EAAM8B,QAQ1B,8BACKH,Q,GAzBII,IAAMC,WA+CZC,uBAhBS,SAACC,GACrB,MAAO,CACHP,OAAQO,EAAMlC,MAAM2B,OACpBE,QAASK,EAAMlC,MAAM6B,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAKA,SAACU,GACxB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,QAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.e70ac4a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__FRHgr\"};","import React from 'react';\r\nimport classes from './Order.module.css';\r\n\r\n\r\n\r\nconst order = (props) => {\r\n    // console.log(props.ingredients);\r\n    const ingredients = [];\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span\r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding:'5px'\r\n            }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>\r\n    })\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>{ingredientOutput}</p>\r\n            <p>Price: <strong>USD {Number(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default order;","import React from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport order from '../../components/Order/Order';\r\n\r\nclass Orders extends React.Component {\r\n    // state = {\r\n    //     orders: [],\r\n    //     loading: true\r\n    // }\r\n\r\n\r\n    componentDidMount() {\r\n        // console.log('hihi')\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n    render() {\r\n        let orders = <Spinner />\r\n        if (!this.props.loading) {\r\n            orders = this.props.orders.map(order => {\r\n                return (\r\n                    <Order key={order.id}\r\n                        ingredients={order.ingredients}\r\n                        price={order.price}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}